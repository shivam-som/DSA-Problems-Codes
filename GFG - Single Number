Question:
Given an array arr[] of positive integers where every element appears even times except for one. Find that number occurring an odd number of times.
Examples:

Input: arr[] = [1, 1, 2, 2, 2]
Output: 2
Explanation: In the given array all element appear two times except 2 which appears thrice.

Input: arr[] = [8, 8, 7, 7, 6, 6, 1]
Output: 1
Explanation: In the given array all element appear two times except 1 which appears once.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)



Solution:
class Solution:
    def getSingle(self, arr):
        # Sort the array to group identical elements together
        arr.sort()
        # Get the length of the array
        n = len(arr)
        
        # Iterate through the array in steps of 2
        for i in range(0, n - 1, 2):
            # Check if the current element is not equal to the next element
            if arr[i] != arr[i + 1]:
                # If they are not equal, return the current element as the unique one
                return arr[i]
        
        # Handle the case where the length of the array is odd
        if n % 2 != 0:
            # Check if the last element is equal to the second-to-last element
            if arr[n - 1] == arr[n - 2]:
                # If they are equal, return the last element (not necessary, but present)
                return arr[n - 1]
            else:
                # If they are not equal, return the last element (the unique one)
                return arr[n - 1]

