Question:
Given a permutation of some of the first natural numbers in an array arr[], determine if the array can be sorted in exactly two swaps. A swap can involve the same pair of indices twice.
Return true if it is possible to sort the array with exactly two swaps, otherwise return false.

Examples:

Input: arr = [4, 3, 2, 1]
Output: true
Explanation: First, swap arr[0] and arr[3]. The array becomes [1, 3, 2, 4]. Then, swap arr[1] and arr[2]. The array becomes [1, 2, 3, 4], which is sorted.

Input: arr = [4, 3, 1, 2]
Output: false
Explanation: It is not possible to sort the array with exactly two swaps.


Answer:
class Solution:
    def checkSorted(self, arr):
        x=len(arr)
        count=0
        
        for i in range(x):
            if arr[i]==i+1:
                continue
            else:
                count=count+1
        
        if count==3 or count==0:
            return True
        
        elif count==4:
            for i in range(x):
                if arr[i]!=i+1 and arr[arr[i]-1]==i+1:
                    count=count-1
                elif arr[i]==i+1:
                    continue
                else:
                    return False
            if count==0:
                return True
            
        else:
            return False
